(define (pack items)
  (define (helper remain sub-list res)
    (cond ((null? remain) (reverse (cons sub-list res)))
          ((equal? (car remain) (car sub-list)) (helper (cdr remain) (cons (car remain) sub-list) res))
          (else (helper (cdr remain) (list (car remain)) (cons sub-list res)))))
  (helper (cdr items) (list (car items)) '()))

(define (encode-modified items)
  (let ((pack-items (pack items)))
    (map (lambda (item)
           (if (= (length item) 1)
             (car item)
             (list (length item) (car item))))
         pack-items)))
